#pragma once

#include "Arduino.h"

#include "globals.h"

// https://fiiir.com/
/*
High-pass Windowed-sinc FIR filter

sampling frequency: 208 Hz
Cutoff frequency fH [Hz] 3
Transition bandwidth bH [Hz] 6
Stopband attenuation A [dB] 60
Window type: Kaiser

alternative:
//sampling frequency: 208 Hz
//Cutoff frequency fH [Hz] 3
//Transition bandwidth bH [Hz] 6
//Window type: Blackman

*/

#define SAMPLEFILTER_TAP_NUM 127

const float filter_taps[SAMPLEFILTER_TAP_NUM] = {
    0.000056041102094582,
    0.000082009440439680,
    0.000114353636908894,
    0.000153529992218508,
    0.000199870952223580,
    0.000253556112410664,
    0.000314583257651614,
    0.000382740106738532,
    0.000457577467547276,
    0.000538384531543088,
    0.000624167044350284,
    0.000713629081135762,
    0.000805159130800707,
    0.000896821150993811,
    0.000986351196701034,
    0.001071160148992266,
    0.001148343002601263,
    0.001214695006321420,
    0.001266734851530374,
    0.001300734912695181,
    0.001312758741317845,
    0.001298705301760817,
    0.001254359709256984,
    0.001175449951204431,
    0.001057708929095078,
    0.000896941019550732,
    0.000689092223003315,
    0.000430322851089620,
    0.000117081601999819,
    -0.000253820210342122,
    -0.000685135569797432,
    -0.001179111150130212,
    -0.001737420536300020,
    -0.002361102614323111,
    -0.003050506431405137,
    -0.003805243763744570,
    -0.004624150538946693,
    -0.005505258144394519,
    -0.006445775513772709,
    -0.007442082723346195,
    -0.008489736650169289,
    -0.009583489049213217,
    -0.010717317198916885,
    -0.011884467048688258,
    -0.013077508581468210,
    -0.014288402883849033,
    -0.015508580199734908,
    -0.016729028035461647,
    -0.017940388188877825,
    -0.019133061396171411,
    -0.020297318131962852,
    -0.021423413963788308,
    -0.022501707754532873,
    -0.023522780928114342,
    -0.024477555966670724,
    -0.025357412292972271,
    -0.026154297710421857,
    -0.026860833624829359,
    -0.027470412356480570,
    -0.027977284966550171,
    -0.028376638166673941,
    -0.028664659051947129,
    -0.028838586592652073,
    0.971103250964944653,
    -0.028838586592652073,
    -0.028664659051947129,
    -0.028376638166673941,
    -0.027977284966550171,
    -0.027470412356480570,
    -0.026860833624829359,
    -0.026154297710421857,
    -0.025357412292972271,
    -0.024477555966670724,
    -0.023522780928114342,
    -0.022501707754532873,
    -0.021423413963788308,
    -0.020297318131962852,
    -0.019133061396171411,
    -0.017940388188877825,
    -0.016729028035461647,
    -0.015508580199734908,
    -0.014288402883849022,
    -0.013077508581468210,
    -0.011884467048688258,
    -0.010717317198916885,
    -0.009583489049213209,
    -0.008489736650169289,
    -0.007442082723346195,
    -0.006445775513772714,
    -0.005505258144394514,
    -0.004624150538946693,
    -0.003805243763744570,
    -0.003050506431405137,
    -0.002361102614323111,
    -0.001737420536300020,
    -0.001179111150130212,
    -0.000685135569797432,
    -0.000253820210342122,
    0.000117081601999819,
    0.000430322851089620,
    0.000689092223003315,
    0.000896941019550732,
    0.001057708929095078,
    0.001175449951204431,
    0.001254359709256985,
    0.001298705301760817,
    0.001312758741317845,
    0.001300734912695181,
    0.001266734851530374,
    0.001214695006321420,
    0.001148343002601263,
    0.001071160148992266,
    0.000986351196701035,
    0.000896821150993811,
    0.000805159130800707,
    0.000713629081135762,
    0.000624167044350284,
    0.000538384531543088,
    0.000457577467547276,
    0.000382740106738532,
    0.000314583257651614,
    0.000253556112410664,
    0.000199870952223580,
    0.000153529992218508,
    0.000114353636908894,
    0.000082009440439680,
    0.000056041102094582,
};

static float filtered[samples];

void highPassFirFilter(const float* input, float* output, const size_t samples) {

    //float* filtered = new float[samples];

    for (size_t i = 0; i < samples; ++i) {
        filtered[i] = 0.0;
        for (size_t j = 0; j < SAMPLEFILTER_TAP_NUM; ++j) {
            if (i >= j) {
                filtered[i] += input[i - j] * filter_taps[j];
            }
        }
    }

    /*for (size_t i = 0; i < samples; ++i) {
        output[i] = filtered[i];
    }*/
    memcpy(output, filtered, samples);
    //delete[] filtered;
}

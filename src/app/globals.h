#pragma once

#include "Arduino.h"

//*****************************************************************************
//  Adding Streaming (insertion-style) Output
//  Serial << "My name is " << name << " and I am " << age << " years old.";
//  Serial << "GPS unit #" << gpsno << " reports lat/long of " << lat << "/" << long;
template <class T>
inline Print& operator<<(Print& obj, T arg)
{
    obj.print(arg);
    return obj;
}
//*****************

//#define FLOAT float

#define LED_GREEN_INIT() {pinMode(LED_GREEN, OUTPUT); digitalWrite(LED_GREEN, HIGH);}
#define LED_GREEN_ON() digitalWrite(LED_GREEN, LOW)
#define LED_GREEN_OFF() digitalWrite(LED_GREEN, HIGH)

#define LED_RED_INIT() {pinMode(LED_RED, OUTPUT); digitalWrite(LED_RED, HIGH);}
#define LED_RED_ON() digitalWrite(LED_RED, LOW)
#define LED_RED_OFF() digitalWrite(LED_RED, HIGH)

#define LED_BLUE_INIT() {pinMode(LED_BLUE, OUTPUT); digitalWrite(LED_BLUE, HIGH);}
#define LED_BLUE_ON() digitalWrite(LED_BLUE, LOW)
#define LED_BLUE_OFF() digitalWrite(LED_BLUE, HIGH)

//#include "AutoStopper.h"

/*void print_elapsed(uint32_t time) {
    float t = time / 1000000.0;
    PRINT("Elapsed: ");
    PRINT(t, 6);
    PRINTLN(" s");
}*/

enum Axis : size_t { X, Y, Z };

enum Control : uint16_t {
    XEN = 0b0000000000000001,
    YEN = 0b0000000000000010,
    ZEN = 0b0000000000000100,
};

enum state_t : uint8_t {
    OFF,
    READY,
    ERROR,
    CONNECTED,
    UPDATE
};

union {
    struct __attribute__((__packed__)) {
        float filter;
        Control control;
        float freq[6];
    } data;
    uint8_t buf[sizeof(data)];
} settings;

////hardcoded in IMU.h//////
const size_t accelRange = 16;  //Max G force readable.  Can be: 2, 4, 8, 16
// Mintavételi frekvencia Hz-ben (legalább 2x a célsáv frekvenciája)
const float sampling_frequency = 208; //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666, 3332, 6664, 13330
////////////////

const size_t samples = 512; // Minták száma (2^n legyen)
const float samples_inv = 1.0f / samples;

//const uint32_t sampling_period_us = 1000000.0 / sampling_frequency;
const size_t bins = samples / 2;
const size_t binsReduced = sampling_frequency / 2;
const float bin_width = sampling_frequency / samples;
const float rmsScaleFactor = 0.7071067811865475; // 1.0/sqrt(2.0)
//const float accelDivider = (32768 / accelRange) / 9.81;  //9.80665;
const float accelMultiplier = 9.81 * accelRange / 32768;

float accelXYZ[3][samples]; // Acceleration data for X, Y, and Z axes
float vReal[samples];
float vImag[samples];

float fft_filtered[bins] = { 0 };

float velocityBandRms[7];
float accelSpectrumPeak[bins];
float velocitySpectrumRms[bins];
float velocityRmsDownsampled[binsReduced];
//float velocityFiltered[binsReduced] = { 0 };

//float displacement[bins];
float dominantFrequencyHz;

const float frequency[256] = {
    0.00000,
    0.40625,
    0.81250,
    1.21875,
    1.62500,
    2.03125,
    2.43750,
    2.84375,
    3.25000,
    3.65625,
    4.06250,
    4.46875,
    4.87500,
    5.28125,
    5.68750,
    6.09375,
    6.50000,
    6.90625,
    7.31250,
    7.71875,
    8.12500,
    8.53125,
    8.93750,
    9.34375,
    9.75000,
    10.15625,
    10.56250,
    10.96875,
    11.37500,
    11.78125,
    12.18750,
    12.59375,
    13.00000,
    13.40625,
    13.81250,
    14.21875,
    14.62500,
    15.03125,
    15.43750,
    15.84375,
    16.25000,
    16.65625,
    17.06250,
    17.46875,
    17.87500,
    18.28125,
    18.68750,
    19.09375,
    19.50000,
    19.90625,
    20.31250,
    20.71875,
    21.12500,
    21.53125,
    21.93750,
    22.34375,
    22.75000,
    23.15625,
    23.56250,
    23.96875,
    24.37500,
    24.78125,
    25.18750,
    25.59375,
    26.00000,
    26.40625,
    26.81250,
    27.21875,
    27.62500,
    28.03125,
    28.43750,
    28.84375,
    29.25000,
    29.65625,
    30.06250,
    30.46875,
    30.87500,
    31.28125,
    31.68750,
    32.09375,
    32.50000,
    32.90625,
    33.31250,
    33.71875,
    34.12500,
    34.53125,
    34.93750,
    35.34375,
    35.75000,
    36.15625,
    36.56250,
    36.96875,
    37.37500,
    37.78125,
    38.18750,
    38.59375,
    39.00000,
    39.40625,
    39.81250,
    40.21875,
    40.62500,
    41.03125,
    41.43750,
    41.84375,
    42.25000,
    42.65625,
    43.06250,
    43.46875,
    43.87500,
    44.28125,
    44.68750,
    45.09375,
    45.50000,
    45.90625,
    46.31250,
    46.71875,
    47.12500,
    47.53125,
    47.93750,
    48.34375,
    48.75000,
    49.15625,
    49.56250,
    49.96875,
    50.37500,
    50.78125,
    51.18750,
    51.59375,
    52.00000,
    52.40625,
    52.81250,
    53.21875,
    53.62500,
    54.03125,
    54.43750,
    54.84375,
    55.25000,
    55.65625,
    56.06250,
    56.46875,
    56.87500,
    57.28125,
    57.68750,
    58.09375,
    58.50000,
    58.90625,
    59.31250,
    59.71875,
    60.12500,
    60.53125,
    60.93750,
    61.34375,
    61.75000,
    62.15625,
    62.56250,
    62.96875,
    63.37500,
    63.78125,
    64.18750,
    64.59375,
    65.00000,
    65.40625,
    65.81250,
    66.21875,
    66.62500,
    67.03125,
    67.43750,
    67.84375,
    68.25000,
    68.65625,
    69.06250,
    69.46875,
    69.87500,
    70.28125,
    70.68750,
    71.09375,
    71.50000,
    71.90625,
    72.31250,
    72.71875,
    73.12500,
    73.53125,
    73.93750,
    74.34375,
    74.75000,
    75.15625,
    75.56250,
    75.96875,
    76.37500,
    76.78125,
    77.18750,
    77.59375,
    78.00000,
    78.40625,
    78.81250,
    79.21875,
    79.62500,
    80.03125,
    80.43750,
    80.84375,
    81.25000,
    81.65625,
    82.06250,
    82.46875,
    82.87500,
    83.28125,
    83.68750,
    84.09375,
    84.50000,
    84.90625,
    85.31250,
    85.71875,
    86.12500,
    86.53125,
    86.93750,
    87.34375,
    87.75000,
    88.15625,
    88.56250,
    88.96875,
    89.37500,
    89.78125,
    90.18750,
    90.59375,
    91.00000,
    91.40625,
    91.81250,
    92.21875,
    92.62500,
    93.03125,
    93.43750,
    93.84375,
    94.25000,
    94.65625,
    95.06250,
    95.46875,
    95.87500,
    96.28125,
    96.68750,
    97.09375,
    97.50000,
    97.90625,
    98.31250,
    98.71875,
    99.12500,
    99.53125,
    99.93750,
    100.34375,
    100.75000,
    101.15625,
    101.56250,
    101.96875,
    102.37500,
    102.78125,
    103.18750,
    103.59375,
};

const float invAngularFreq[256] = {
    0.00000000000000000,
    0.39176601376466500,
    0.19588300688233300,
    0.13058867125488800,
    0.09794150344116640,
    0.07835320275293310,
    0.06529433562744420,
    0.05596657339495220,
    0.04897075172058320,
    0.04352955708496280,
    0.03917660137646660,
    0.03561509216042410,
    0.03264716781372210,
    0.03013584721266660,
    0.02798328669747610,
    0.02611773425097770,
    0.02448537586029160,
    0.02304505963321560,
    0.02176477854248140,
    0.02061926388235080,
    0.01958830068823330,
    0.01865552446498410,
    0.01780754608021210,
    0.01703330494628980,
    0.01632358390686110,
    0.01567064055058660,
    0.01506792360633330,
    0.01450985236165430,
    0.01399164334873810,
    0.01350917288843670,
    0.01305886712548880,
    0.01263761334724730,
    0.01224268793014580,
    0.01187169738680800,
    0.01152252981660780,
    0.01119331467899040,
    0.01088238927124070,
    0.01058827064228830,
    0.01030963194117540,
    0.01004528240422220,
    0.00979415034411664,
    0.00955526862840647,
    0.00932776223249203,
    0.00911083752941082,
    0.00890377304010603,
    0.00870591141699257,
    0.00851665247314490,
    0.00833544710137586,
    0.00816179195343053,
    0.00799522477070746,
    0.00783532027529331,
    0.00768168654440521,
    0.00753396180316664,
    0.00739181158046539,
    0.00725492618082714,
    0.00712301843208483,
    0.00699582167436903,
    0.00687308796078360,
    0.00675458644421837,
    0.00664010192821467,
    0.00652943356274442,
    0.00642239366827320,
    0.00631880667362364,
    0.00621850815499469,
    0.00612134396507290,
    0.00602716944253331,
    0.00593584869340402,
    0.00584725393678605,
    0.00576126490830390,
    0.00567776831542993,
    0.00559665733949522,
    0.00551783117978402,
    0.00544119463562035,
    0.00536665772280364,
    0.00529413532114413,
    0.00522354685019554,
    0.00515481597058770,
    0.00508787030863202,
    0.00502264120211110,
    0.00495906346537551,
    0.00489707517205832,
    0.00483661745388476,
    0.00477763431420324,
    0.00472007245499597,
    0.00466388111624602,
    0.00460901192664312,
    0.00455541876470541,
    0.00450305762947891,
    0.00445188652005302,
    0.00440186532319849,
    0.00435295570849628,
    0.00430512103038094,
    0.00425832623657245,
    0.00421253778241576,
    0.00416772355068793,
    0.00412385277647016,
    0.00408089597671527,
    0.00403882488417181,
    0.00399761238535373,
    0.00395723246226935,
    0.00391766013764665,
    0.00387887142341253,
    0.00384084327220260,
    0.00380355353169578,
    0.00376698090158332,
    0.00373110489299681,
    0.00369590579023269,
    0.00366136461462304,
    0.00362746309041357,
    0.00359418361251987,
    0.00356150921604241,
    0.00352942354742942,
    0.00349791083718451,
    0.00346695587402359,
    0.00343654398039180,
    0.00340666098925796,
    0.00337729322210919,
    0.00334842746807406,
    0.00332005096410733,
    0.00329215137617366,
    0.00326471678137221,
    0.00323773565094765,
    0.00321119683413660,
    0.00318508954280216,
    0.00315940333681182,
    0.00313412811011732,
    0.00310925407749735,
    0.00308477176192650,
    0.00306067198253645,
    0.00303694584313694,
    0.00301358472126666,
    0.00299058025774554,
    0.00296792434670201,
    0.00294560912605012,
    0.00292362696839303,
    0.00290197047233086,
    0.00288063245415195,
    0.00285960593988807,
    0.00283888415771497,
    0.00281846053068105,
    0.00279832866974761,
    0.00277848236712529,
    0.00275891558989201,
    0.00273962247387878,
    0.00272059731781018,
    0.00270183457768735,
    0.00268332886140182,
    0.00266507492356915,
    0.00264706766057206,
    0.00262930210580312,
    0.00261177342509777,
    0.00259447691234878,
    0.00257740798529385,
    0.00256056218146840,
    0.00254393515431601,
    0.00252752266944945,
    0.00251132060105555,
    0.00249532492843736,
    0.00247953173268776,
    0.00246393719348846,
    0.00244853758602916,
    0.00243332927804140,
    0.00241830872694238,
    0.00240347247708384,
    0.00238881715710162,
    0.00237433947736161,
    0.00236003622749798,
    0.00234590427403991,
    0.00233194055812301,
    0.00231814209328204,
    0.00230450596332156,
    0.00229102932026120,
    0.00227770938235271,
    0.00226454343216570,
    0.00225152881473946,
    0.00223866293579809,
    0.00222594326002651,
    0.00221336730940489,
    0.00220093266159924,
    0.00218863694840595,
    0.00217647785424814,
    0.00216445311472191,
    0.00215256051519047,
    0.00214079788942440,
    0.00212916311828623,
    0.00211765412845765,
    0.00210626889120788,
    0.00209500542120142,
    0.00208386177534397,
    0.00207283605166490,
    0.00206192638823508,
    0.00205113096211867,
    0.00204044798835763,
    0.00202987571898790,
    0.00201941244208590,
    0.00200905648084444,
    0.00199880619267686,
    0.00198865996834856,
    0.00197861623113467,
    0.00196867343600334,
    0.00195883006882333,
    0.00194908464559535,
    0.00193943571170626,
    0.00192988184120525,
    0.00192042163610130,
    0.00191105372568129,
    0.00190177676584789,
    0.00189258943847664,
    0.00188349045079166,
    0.00187447853475917,
    0.00186555244649841,
    0.00185671096570931,
    0.00184795289511635,
    0.00183927705992801,
    0.00183068230731152,
    0.00182216750588217,
    0.00181373154520678,
    0.00180537333532104,
    0.00179709180625993,
    0.00178888590760121,
    0.00178075460802121,
    0.00177269689486274,
    0.00176471177371471,
    0.00175679826800298,
    0.00174895541859226,
    0.00174118228339851,
    0.00173347793701179,
    0.00172584147032892,
    0.00171827199019590,
    0.00171076861905967,
    0.00170333049462898,
    0.00169595676954401,
    0.00168864661105459,
    0.00168139920070672,
    0.00167421373403703,
    0.00166708942027517,
    0.00166002548205367,
    0.00165302115512517,
    0.00164607568808683,
    0.00163918834211157,
    0.00163235839068611,
    0.00162558511935546,
    0.00161886782547382,
    0.00161220581796159,
    0.00160559841706830,
    0.00159904495414149,
    0.00159254477140108,
    0.00158609722171929,
    0.00157970166840591,
    0.00157335748499866,
    0.00156706405505866,
    0.00156082077197078,
    0.00155462703874867,
    0.00154848226784453,
    0.00154238588096325,
    0.00153633730888104,
};
